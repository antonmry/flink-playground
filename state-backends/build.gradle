buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

plugins {
  id 'java'
  id 'application'
  // shadow plugin to produce fat JARs
  id 'com.github.johnrengelman.shadow' version '7.1.2'
}
// artifact properties
group = 'com.galiglobal'
version = '0.1-SNAPSHOT'
mainClassName = 'com.galiglobal.DataStreamJob'
description = """Demo Job for Backend State tests"""
ext {
  javaVersion = '17'
//  flinkVersion = '2.0-preview1'
  flinkVersion = '2.0-SNAPSHOT'
  scalaBinaryVersion = '_2.12'
  slf4jVersion = '1.7.36'
  log4jVersion = '2.24.1'
}
sourceCompatibility = javaVersion
targetCompatibility = javaVersion
tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.properties", '--add-exports', 'java.base/sun.net.util=ALL-UNNAMED','--add-exports', 'java.rmi/sun.rmi.registry=ALL-UNNAMED','--add-exports', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED','--add-exports', 'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED','--add-exports', 'jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED','--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED','--add-exports', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED','--add-exports', 'java.security.jgss/sun.security.krb5=ALL-UNNAMED','--add-opens', 'java.base/java.lang=ALL-UNNAMED','--add-opens', 'java.base/java.net=ALL-UNNAMED','--add-opens', 'java.base/java.io=ALL-UNNAMED','--add-opens', 'java.base/java.nio=ALL-UNNAMED','--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED','--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED','--add-opens', 'java.base/java.text=ALL-UNNAMED','--add-opens', 'java.base/java.time=ALL-UNNAMED','--add-opens', 'java.base/java.util=ALL-UNNAMED','--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED','--add-opens', 'java.base/java.util.concurrent.atomic=ALL-UNNAMED','--add-opens', 'java.base/java.util.concurrent.locks=ALL-UNNAMED']

run {
  if (!project.hasProperty('args')) {
    args = ['test']
  } else {
    args project.args.split(',')
  }
}

// declare where to find the dependencies of your project
repositories {
  mavenCentral()
  maven {
    url "https://repository.apache.org/content/repositories/snapshots"
    mavenContent {
      snapshotsOnly()
    }
  }
}
// NOTE: We cannot use "compileOnly" or "shadow" configurations since then we could not run code
// in the IDE or with "gradle run". We also cannot exclude transitive dependencies from the
// shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).
// -> Explicitly define the // libraries we want to be included in the "flinkShadowJar" configuration!
configurations {
  flinkShadowJar // dependencies which go into the shadowJar
  // always exclude these (also from transitive dependencies) since they are provided by Flink
  flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
  flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
  flinkShadowJar.exclude group: 'org.slf4j'
  flinkShadowJar.exclude group: 'org.apache.logging.log4j'
}
// declare the dependencies for your production and test code
dependencies {
  // --------------------------------------------------------------
  // Compile-time dependencies that should NOT be part of the
  // shadow (uber) jar and are provided in the lib folder of Flink
  // --------------------------------------------------------------
  implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
  implementation "org.apache.flink:flink-clients:${flinkVersion}"

  implementation "org.apache.flink:flink-table-api-java:$flinkVersion"
  implementation "org.apache.flink:flink-connector-files:$flinkVersion"
  implementation "org.apache.flink:flink-table-api-java-bridge:$flinkVersion"
  implementation "org.apache.flink:flink-table-planner_2.12:$flinkVersion"

  implementation "org.apache.flink:flink-statebackend-rocksdb:$flinkVersion"
  implementation "org.apache.flink:flink-statebackend-forst:$flinkVersion"


  // --------------------------------------------------------------
  // Dependencies that should be part of the shadow jar, e.g.
  // connectors. These must be in the flinkShadowJar configuration!
  // --------------------------------------------------------------
  implementation "org.apache.flink:flink-runtime-web:$flinkVersion"
  implementation "org.apache.flink:flink-s3-fs-hadoop:$flinkVersion"

  runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
  runtimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
  runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"

  // Add test dependencies here.
  // testCompile "junit:junit:4.12"
  testImplementation "org.apache.flink:flink-test-utils:$flinkVersion"
  testImplementation 'org.mockito:mockito-core:4.0.0'
}

// make compileOnly dependencies available for tests:
sourceSets {
  main.compileClasspath += configurations.flinkShadowJar
  main.runtimeClasspath += configurations.flinkShadowJar
  test.compileClasspath += configurations.flinkShadowJar
  test.runtimeClasspath += configurations.flinkShadowJar
  javadoc.classpath += configurations.flinkShadowJar
}
run.classpath = sourceSets.main.runtimeClasspath

jar {
  manifest {
    attributes 'Built-By': System.getProperty('user.name'),
            'Build-Jdk': System.getProperty('java.version')
  }
}

shadowJar {
  configurations = [project.configurations.flinkShadowJar]
}
